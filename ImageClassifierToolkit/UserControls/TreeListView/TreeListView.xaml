<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TiS.Recognition.FieldClassifyService.FieldClassifyToolkit.UserControls">

	<!--  Converter for Indentation of items  -->
	<local:TreeListViewConverter x:Key="TreeListViewConverter" />
	<local:ConvertTreeListViewRowColor x:Key="ConvertTreeListViewRowColor" />

	<!--  Control Template for TreeViewItem's.  -->
	<ControlTemplate x:Key="TreeListViewItem" TargetType="TreeViewItem">
		<!--  Grid containing the current information and the sub nodes.  -->
		<StackPanel Margin="0,0,0,0">
			<Grid>
				<!--  Border wrapping the content presenter.  -->
				<Border x:Name="Border"
				        Background="{Binding Converter={StaticResource ConvertTreeListViewRowColor}}"
				        BorderBrush="#FFCCCCCC"
				        BorderThickness="0,0,0,1">
					<!--  GridViewRowPrsenter containing the current information.  -->
					<GridViewRowPresenter Columns="{Binding Columns, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:TreeListView}}" Content="{TemplateBinding Header}" />
				</Border>
				<Rectangle Name="BdB1"
				           Margin="0,-1,0,0"
				           Fill="{x:Null}" />
				<Rectangle Name="BdB"
				           Margin="0,-1,0,0"
				           Fill="{x:Null}"
				           Stroke="{x:Null}"
				           StrokeDashArray="4 2"
				           StrokeThickness="1" />
			</Grid>
			<!--  ItemsPresenter containing the sub nodes  -->
			<ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed" />
		</StackPanel>
		<ControlTemplate.Triggers>
			<!--  Trigger used to show the sub items  -->
			<Trigger Property="IsExpanded" Value="True">
				<Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible" />
			</Trigger>
			<!--  Trigger used to change the color based on selection  -->
			<Trigger Property="IsSelected" Value="true">
				<!--  Change the background color  -->
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource MainGridSelectedBackground}" />
				<Setter TargetName="BdB" Property="Stroke" Value="{DynamicResource MainGridSelectedBorder}" />
				<Setter TargetName="BdB1" Property="Stroke" Value="{DynamicResource MainGridSelectedBackground}" />
			</Trigger>
			<!--  Trigger used to change the color based on selection  -->
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true" />
					<Condition Property="IsSelectionActive" Value="false" />
				</MultiTrigger.Conditions>
				<!--  Change the background color  -->
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<!--  Change the foreground color  -->
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			</MultiTrigger>
			<!--  Trigger used to change the color based on the status of the item  -->
			<Trigger Property="IsEnabled" Value="false">
				<!--  Change the foreground color  -->
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<!--  Control Template for TreeListViewExpander's.  -->
	<ControlTemplate x:Key="TreeListViewExpander" TargetType="{x:Type local:TreeListViewExpander}">
		<ControlTemplate.Resources />

		<StackPanel x:Name="ContainerElement" Orientation="Horizontal">
			<!--  Use a FrameworkElement to indent the button  -->
			<FrameworkElement Width="3" />
			<!--  Use a standard toggle button  -->
			<ToggleButton Margin="0,0,20,0"
			              VerticalAlignment="Center"
			              IsChecked="{Binding IsExpanded,
			                                  RelativeSource={RelativeSource Mode=FindAncestor,
			                                                                 AncestorType=TreeViewItem}}"
			              Style="{DynamicResource MainGridToggleButtonStyle}" />
		</StackPanel>
		<ControlTemplate.Triggers>
			<!--  Trigger used to show/hide the expand button  -->
			<DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="False">
				<Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden" />
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--  Apply this style to all controls of type 'TreeListView'.  -->
	<Style TargetType="{x:Type local:TreeListView}">
		<!--  Set the control template.  -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TreeListView}">
					<ControlTemplate.Resources>
						<!--  Apply this style to all 'TreeViewItem's.  -->
						<Style TargetType="TreeViewItem">
							<Setter Property="IsExpanded" Value="true" />
							<Setter Property="Template" Value="{StaticResource TreeListViewItem}" />
						</Style>
						<!--  Apply this style to all 'TreeListViewExpander's.  -->
						<Style TargetType="local:TreeListViewExpander">
							<Setter Property="Template" Value="{StaticResource TreeListViewExpander}" />
						</Style>
					</ControlTemplate.Resources>
					<!--  Create a standard border around the 'TreeListView'.  -->
					<Border Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}">
						<!--
							ScrollViewer providing horizontal scrolling functionality
							for both, content and headers.
						-->
						<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
							<!--  Grid containing the header row and all the content rows.  -->
							<Grid>
								<Grid.RowDefinitions>
									<!--  The header row.  -->
									<RowDefinition Height="Auto" />
									<!--  The content row.  -->
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<!--  The header row.  -->



								<GridViewHeaderRowPresenter AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}" Columns="{TemplateBinding Columns}" />
								<!--
									ScrollViewer providing vertical scrolling
									functionality for the content.
								-->
								<ScrollViewer Grid.Row="1"
								              HorizontalScrollBarVisibility="Disabled"
								              VerticalScrollBarVisibility="Auto">
									<!--  ItemsPresenter containg the content.  -->
									<ItemsPresenter />
								</ScrollViewer>
							</Grid>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
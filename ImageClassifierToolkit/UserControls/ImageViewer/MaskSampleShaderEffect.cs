//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;


namespace TiS.Recognition.FieldClassifyService.FieldClassifyToolkit.UserControls
{
	
	public class MaskSampleShaderEffect : ShaderEffect {
		public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(MaskSampleShaderEffect), 0);
		public static readonly DependencyProperty MaskSamplerProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("MaskSampler", typeof(MaskSampleShaderEffect), 1);
		public MaskSampleShaderEffect() {
			PixelShader pixelShader = new PixelShader();			
            pixelShader.UriSource = MakePackUri("UserControls/ImageViewer/MaskSampleShaderEffect.ps");
			this.PixelShader = pixelShader;

			this.UpdateShaderValue(InputProperty);
			this.UpdateShaderValue(MaskSamplerProperty);
		}

        // MakePackUri is a utility method for computing a pack uri
        // for the given resource. 
        private Uri MakePackUri(string relativeFile)
        {
            Assembly a = typeof(MaskSampleShaderEffect).Assembly;

            // Extract the short name.
            string assemblyShortName = a.ToString().Split(',')[0];

            string uriString = "pack://application:,,,/" +
                assemblyShortName +
                ";component/" +
                relativeFile;

            return new Uri(uriString);
        }


		public Brush Input {
			get {
				return ((Brush)(this.GetValue(InputProperty)));
			}
			set {
				this.SetValue(InputProperty, value);
			}
		}
		public Brush MaskSampler {
			get {
				return ((Brush)(this.GetValue(MaskSamplerProperty)));
			}
			set {
				this.SetValue(MaskSamplerProperty, value);
			}
		}
	}
}

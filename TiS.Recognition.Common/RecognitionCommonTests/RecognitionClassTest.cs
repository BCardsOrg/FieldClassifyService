// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using TiS.Recognition.Common;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Drawing;

namespace RecognitionCommonTests
{
    /// <summary>
    ///This is a test class for TiS.Recognition.Common.TPage and is intended
    ///to contain all TiS.Recognition.Common.TPage Unit Tests
    ///</summary>
    [TestClass()]
    public class TPageTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddLine (TLine)
        ///</summary>
        [TestMethod()]
        public void AddLineTest()
        {
            TPage target = new TPage();
            TLine oLine = new TLine(); 

            target.AddLine(oLine);
            TiS_Recognition_Common_TPageAccessor pageAccessor = new TiS_Recognition_Common_TPageAccessor(target);

            Assert.IsTrue(target.Lines.Contains(oLine),"Target must contain added line");
            Assert.IsTrue(target.Lines.Count == 1, "number of lines is wrong");
        }

        /// <summary>
        ///A test for AddWord (TWord)
        ///</summary>
        [DeploymentItem("TiS.Recognition.Common.dll")]
        [TestMethod()]
        public void AddWordTest()
        {
            TPage target = new TPage();

            RecognitionCommonTests.TiS_Recognition_Common_TPageAccessor accessor = new RecognitionCommonTests.TiS_Recognition_Common_TPageAccessor(target);

            TWord oNewWord = new TWord();

            accessor.AddWord(oNewWord);

            Assert.IsTrue(target.Lines.Count == 1,
                "number of lines is wrong");
            Assert.IsTrue(target.Lines[0].Words.Contains(oNewWord) == true,
                "Target must contain added word");

        }

        /// <summary>
        ///A test for Deskew (TOCRRect)
        ///</summary>
        [TestMethod()]
        public void DeskewTest()
        {
            TPage target = new TPage();

            TOCRRect oRect = new TOCRRect(0, 0, 100, 100);
            TiS_Recognition_Common_TPageAccessor pageAccess = new TiS_Recognition_Common_TPageAccessor(target);
            pageAccess.m_iDeskewY = 100;
            TOCRRect actual;
            actual = target.Deskew(oRect);

            Assert.AreNotEqual(target, actual, "TiS.Recognition.Common.TPage.Deskew did not return the expected value.");
          
        }

        /// <summary>
        ///A test for Lines
        ///</summary>
        [TestMethod()]
        public void LinesTest()
        {
            TPage target = new TPage();

            List<TLine> val = null; 


            Assert.AreNotEqual(val, target.Lines, "TiS.Recognition.Common.TPage.Lines was not initialized corectly.");
          
        }

        /// <summary>
        ///A test for LoadFromPRD (string)
        ///</summary>
        [TestMethod()]
        public void LoadFromPRDTest()
        {            
            string sOldPRDFileName = @"OldTestPrd.PRD";
            string sNewPRDFileName = @"Test\NewTestPrd.PRD";

            // Load the prd from the old PRD (Prd in an old format)
            TPage oldPrdPage = TiS.Recognition.Common.TPage.LoadFromPRD(sOldPRDFileName);

            // Check that the prd page is not null and contains lines.
            Assert.IsNotNull(oldPrdPage, "TiS.Recognition.Common.TPage.LoadFromPRD returned null page.");
            Assert.IsTrue(oldPrdPage.Lines.Count > 0, "TiS.Recognition.Common.TPage.LoadFromPRD returned a page with no lines");            

            // Save the prd so it will become with the new PRD format.
            TPage.SaveToPRD(oldPrdPage, sNewPRDFileName);

            // Load the new format prd.
            TPage newPrdPage = TiS.Recognition.Common.TPage.LoadFromPRD(sNewPRDFileName);

            // Check that the prd page is not null and contains lines.
            Assert.IsNotNull(newPrdPage, "TiS.Recognition.Common.TPage.LoadFromPRD returned null page.");
            Assert.IsTrue(newPrdPage.Lines.Count > 0, "TiS.Recognition.Common.TPage.LoadFromPRD returned a page with no lines");

            bool isPrdEquals = ComparePrdPages(oldPrdPage, newPrdPage);
            Assert.IsTrue(isPrdEquals, "TiS.Recognition.Common.TPage.LoadFromPRD retured a page in old format that is not equal to the page in the new format");

        }

        /// <summary>
        ///A test for LoadFromRawData (byte[])
        ///</summary>
        [TestMethod()]
        public void LoadFromRawDataTest()
        {
            string sPRDFileName = "P0001.PRD";
            System.IO.File.ReadAllBytes(sPRDFileName);
            byte[] oRawData = System.IO.File.ReadAllBytes(sPRDFileName);

            TPage expected = TPage.LoadFromPRD(sPRDFileName);
            TPage actual;

            actual = TiS.Recognition.Common.TPage.LoadFromRawData(oRawData);

            Assert.AreEqual(expected.Lines.Count, actual.Lines.Count, "TiS.Recognition.Common.TPage.LoadFromRawData did not return the expected value.");
          
        }

        /// <summary>
        ///A test for MMtoPixel (int)
        ///</summary>
        [TestMethod()]
        public void MMtoPixelTest()
        {
            TPage target = new TPage();
            TiS_Recognition_Common_TPageAccessor pageAccess = new TiS_Recognition_Common_TPageAccessor(target);
            pageAccess.m_iResolution = 200;

            int iMMvalue = 1; 

            int expected = 7;
            int actual;

            actual = target.MMtoPixel(iMMvalue);

            Assert.AreEqual(expected, actual, "TiS.Recognition.Common.TPage.MMtoPixel did not return the expected value.");
          
        }

        /// <summary>
        ///A test for NoOfLines
        ///</summary>
        [TestMethod()]
        public void NoOfLinesTest()
        {
            TPage target = new TPage();

           


            Assert.AreEqual(target.Lines.Count, target.NoOfLines, "TiS.Recognition.Common.TPage.NoOfLines was not set correctly.");
           
        }

        /// <summary>
        ///A test for SaveToPRD (TPage, string)
        ///</summary>
        [TestMethod()]
        public void SaveToPRDTest()
        {
            string sPRDFileName = @"P0001.PRD";
            TPage oPage = TPage.LoadFromPRD(sPRDFileName); ; 

            sPRDFileName += "Result";
            sPRDFileName = Path.Combine(Environment.CurrentDirectory, sPRDFileName);
            TiS.Recognition.Common.TPage.SaveToPRD(oPage, sPRDFileName);

            
        }

		/// <summary>
		///A test for SaveToPRD (TPage, string)
		///</summary>
		[TestMethod()]
		public void SaveLoadPRDTest2()
		{
			string sPRDFileName = @"P0001.PRD";
			TPage oPage = CreatePRD();

			sPRDFileName += "Result";
			sPRDFileName = Path.Combine(Environment.CurrentDirectory, sPRDFileName);
			TiS.Recognition.Common.TPage.SaveToPRD(oPage, sPRDFileName);

			TPage oPage2 = TPage.LoadFromPRD(sPRDFileName);

			Assert.AreEqual(oPage.NoOfLines, oPage2.NoOfLines);
			Assert.AreEqual(oPage.NoOfWords, oPage2.NoOfWords);
			Assert.AreEqual(oPage.Rectangle, oPage2.Rectangle);
			Assert.AreEqual(oPage.Data, oPage2.Data);
			Assert.AreEqual(oPage.Lines[0].Words[0].Data, oPage2.Lines[0].Words[0].Data);

		}

		/// <summary>
		///A Create PRD
		///</summary>
		public TPage CreatePRD()
		{
			TPage page = new TPage();

			TLine line1 = new TLine();
			TLine line2 = new TLine();
			TLine line3 = new TLine();

			TWord word1 = new TWord();
			TWord word2 = new TWord();
			TWord word3 = new TWord();
			TWord word4 = new TWord();
			TWord word5 = new TWord();

			word1.AddChar(new TChar('A', 100, new TOCRRect(10, 10, 20, 20)));
			word1.AddChar(new TChar('B', 100, new TOCRRect(40, 10, 20, 20)));
			word1.AddChar(new TChar('C', 100, new TOCRRect(70, 10, 20, 20)));

			word2.AddChar(new TChar('D', 100, new TOCRRect(100, 10, 20, 20)));
			word2.AddChar(new TChar('E', 100, new TOCRRect(140, 10, 20, 20)));
			word2.AddChar(new TChar('F', 100, new TOCRRect(170, 10, 20, 20)));

			word3.AddChar(new TChar('1', 100, new TOCRRect(10, 40, 20, 20)));
			word3.AddChar(new TChar('2', 100, new TOCRRect(40, 40, 20, 20)));
			word3.AddChar(new TChar('3', 100, new TOCRRect(70, 40, 20, 20)));

			word4.AddChar(new TChar('X', 100, new TOCRRect(10, 70, 20, 20)));
			word4.AddChar(new TChar('Y', 100, new TOCRRect(40, 70, 20, 20)));
			word4.AddChar(new TChar('Z', 100, new TOCRRect(70, 70, 20, 20)));
															   
			word5.AddChar(new TChar('W', 100, new TOCRRect(110, 70, 20, 20)));
			word5.AddChar(new TChar('V', 100, new TOCRRect(140, 70, 20, 20)));
			word5.AddChar(new TChar('Q', 100, new TOCRRect(170, 70, 20, 20)));

			line1.AddWord(word1);
			line1.AddWord(word2);

			line2.AddWord(word3);

			line3.AddWord(word4);
			line3.AddWord(word5);

			page.AddLine(line1);
			page.AddLine(line2);
			page.AddLine(line3);

			return page;

		}



        /// <summary>
        ///A test for Word (int, int)
        ///</summary>
        [TestMethod()]
        public void WordTest()
        {
            string sPRDFileName = "P0001.PRD";
            TPage oPage = TPage.LoadFromPRD(sPRDFileName); ; 

            int iLine = 0; 
            int iWord = 0;

            TWord expected = oPage.Lines[iLine].Words[iWord]; ;
            TWord actual;

            actual = oPage.Word(iLine, iWord);

            Assert.AreEqual(expected, actual, "TiS.Recognition.Common.TPage.Word did not return the expected value.");
        }

        #region Methods

        /// <summary>
        /// Receives 2 prd pages and return if they are equal or not.
        /// </summary>
        private bool ComparePrdPages(TPage prdPage1, TPage prdPage2)
        {
            long charCounter = 0;

            if (prdPage1.Confidance != prdPage2.Confidance)
            {
                return false;
            }

            if (prdPage1.NoOfLines != prdPage2.NoOfLines)
            {
                return false;
            }

            Rectangle page1Rectangle = prdPage1.Rectangle;
            Rectangle page2Rectangle = prdPage2.Rectangle;

            if (page1Rectangle.Top != page2Rectangle.Top)
            {
                return false;
            }

            if (page1Rectangle.Bottom != page2Rectangle.Bottom)
            {
                return false;
            }

            if (page1Rectangle.Left != page2Rectangle.Left)
            {
                return false;
            }

            if (page1Rectangle.Right != page2Rectangle.Right)
            {
                return false;
            }

            TOCRRect page1OcrRectangle = new TOCRRect(page1Rectangle.Left, page1Rectangle.Top, page1Rectangle.Width, page1Rectangle.Height);
            TOCRRect page2OcrRectangle = new TOCRRect(page2Rectangle.Left, page2Rectangle.Top, page2Rectangle.Width, page2Rectangle.Height);
            if (prdPage1.Deskew(page1OcrRectangle).Top != prdPage1.Deskew(page2OcrRectangle).Top)
            {
                return false;
            }

            if (prdPage1.Deskew(page1OcrRectangle).Bottom != prdPage1.Deskew(page2OcrRectangle).Bottom)
            {
                return false;
            }

            if (prdPage1.Deskew(page1OcrRectangle).Left != prdPage1.Deskew(page2OcrRectangle).Left)
            {
                return false;
            }

            if (prdPage1.Deskew(page1OcrRectangle).Right != prdPage1.Deskew(page2OcrRectangle).Right)
            {
                return false;
            }

            if (prdPage1.MMtoPixel(100) != prdPage2.MMtoPixel(100))
            {
                return false;
            }

            IList<TLine> prdLines = prdPage1.Lines;

            // Lines check.
            for (int i = 0; i < prdLines.Count; i++)
            {
                TLine prdLine1 = prdPage1.Lines[i];
                TLine prdLine2 = prdPage2.Lines[i];

                if (prdLine1.Rectangle.Top != prdLine2.Rectangle.Top)
                {
                    return false;
                }

                if (prdLine1.Rectangle.Bottom != prdLine2.Rectangle.Bottom)
                {
                    return false;
                }

                if (prdLine1.Rectangle.Left != prdLine2.Rectangle.Left)
                {
                    return false;
                }

                if (prdLine1.Rectangle.Right != prdLine2.Rectangle.Right)
                {
                    return false;
                }

                // Check words in line.
                for (int j = 0; j < prdLine1.Words.Count; j++)
                {
                    TWord prdWord1 = prdLine1.Words[j];
                    TWord prdWord2 = prdLine2.Words[j];

                    if (prdWord1.Confidance != prdWord2.Confidance)
                    {
                        return false;
                    }

                    if (prdWord1.Style != prdWord2.Style)
                    {
                        return false;
                    }

                    // Check characters in word.
                    for (int z = 0; z < prdWord1.Chars.Count; z++)
                    {
                        TChar prdChar1 = prdWord1.Chars[z];
                        TChar prdChar2 = prdWord2.Chars[z];

                        if (prdChar1.Rect.Top != prdChar2.Rect.Top)
                        {
                            return false;
                        }

                        if (prdChar1.Rect.Bottom != prdChar2.Rect.Bottom)
                        {
                            return false;
                        }

                        if (prdChar1.Rect.Left != prdChar2.Rect.Left)
                        {
                            return false;
                        }

                        if (prdChar1.Rect.Right != prdChar2.Rect.Right)
                        {
                            return false;
                        }

                        if (prdChar1.Confidance != prdChar2.Confidance)
                        {
                            return false;
                        }

                        if (prdChar1.CharData != prdChar2.CharData)
                        {
                            return false;
                        }
                    }
                }
            }

            return true;
        }


        #endregion
    }


}

// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using TiS.Recognition.Common;
using Recognition.Locator;
using System.Drawing;

namespace RecognitionCommonTests
{
    /// <summary>
    ///This is a test class for Recognition.Locator.DataLocator and is intended
    ///to contain all Recognition.Locator.DataLocator Unit Tests
    ///</summary>
    [TestClass()]
    public class DataLocatorTest
    {
        private TestContext testContextInstance;
        private static TPage m_TestPage;
        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            m_TestPage = TPage.LoadFromPRD(@"P0002.PRD");
        }
        
        //Use ClassCleanup to run code after all tests in a class have run
        
        [ClassCleanup()]
        public static void MyClassCleanup()
        {
            
        }
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DataLocator (TPage)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            System.Diagnostics.Stopwatch watch = System.Diagnostics.Stopwatch.StartNew();
            TPage page = TPage.LoadFromPRD("P0001.PRD");
            long pageLoding = watch.ElapsedMilliseconds;

            DataLocator target = new DataLocator(page);

            long pageIndex = watch.ElapsedMilliseconds;
            watch.Stop();
            TestContext.WriteLine("{0} load, {1} index", pageLoding, pageIndex);
            Recognition_Locator_DataLocatorAccessor access = new Recognition_Locator_DataLocatorAccessor(target);
            Assert.AreEqual(page.Lines.Count, access.m_LineWords.Count);
        }

        /// <summary>
        ///A test for HasLineAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void HasLineAtPointTest()
        {
            TPage page = m_TestPage; 

            DataLocator target = new DataLocator(page);

            Point point = new Point(); 

            bool expected = false;
            bool actual;

            actual = target.HasLineAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");

            point = new Point(325, 285);
            expected = true;

            actual = target.HasLineAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");
            

        }
        /// <summary>
        ///A test for LineAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void LineAtPointTest()
        {
            TPage page = m_TestPage; 

            DataLocator target = new DataLocator(page);

            Point point = new Point(); 

            TLine expected = null;
            TLine actual = null;
            IList<TLine> result = target.LinesAtPoint(point);
            if (result.Count > 0)
                actual = result[0];

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.LineAtPoint did not return the expected value.");

            point = new Point(325, 285);
            expected = page.Lines[0];
            
            actual = target.LinesAtPoint(point)[0];

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.LineAtPoint did not return the expected value.");


            
        }

        /// <summary>
        ///A test for HasWordAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void HasWordAtPointTest()
        {
            TPage page = m_TestPage;

            DataLocator target = new DataLocator(page);

            Point point = new Point(); 

            bool expected = false;
            bool actual;

            actual = target.HasWordAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasWordAtPoint did not return the expected value." +
                    "");

            point = new Point(325, 285);
            expected = true;

            actual = target.HasWordAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");
            
        }
    
        /// <summary>
        ///A test for WordAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void WordAtPointTest()
        {
            TPage page = m_TestPage;

            DataLocator target = new DataLocator(page);

            Point point = new Point(); // TODO: Initialize to an appropriate value

            TWord expected = null;
            TWord actual;

            actual = target.WordAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.WordAtPoint did not return the expected value.");

            point = new Point(325, 285);
            expected = page.Lines[0].Words[0];

            actual = target.WordAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");
            
        }
        /// <summary>
        ///A test for CharAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void CharAtPointTest()
        {
            TPage page = m_TestPage;

            DataLocator target = new DataLocator(page);

            Point point = new Point(); 

            TChar expected = null;
            TChar actual;

            actual = target.CharAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.CharAtPoint did not return the expected value.");

            point = new Point(325, 285);
            expected = page.Lines[0].Words[0].Chars[0];

            actual = target.CharAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");
        }



        /// <summary>
        ///A test for HasCharAtPoint (Point)
        ///</summary>
        [TestMethod()]
        public void HasCharAtPointTest()
        {
            TPage page = m_TestPage;

            DataLocator target = new DataLocator(page);

            Point point = new Point(); 

            bool expected = false;
            bool actual;

            actual = target.HasCharAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasCharAtPoint did not return the expected value." +
                    "");
           
            point = new Point(325, 285);
            expected = true;

            actual = target.HasCharAtPoint(point);

            Assert.AreEqual(expected, actual, "Recognition.Locator.DataLocator.HasLineAtPoint did not return the expected value." +
                    "");
            
        }



        /// <summary>
        ///A test for WordsInRectangle (Rectangle, bool)
        ///</summary>
        [TestMethod()]
        public void WordsInRectangleTest()
        {
            TPage page = m_TestPage; 

            DataLocator target = new DataLocator(page);

            Rectangle rectangle = new Rectangle(0,0,1,1); 

            bool containsOnly = false; 

            
            IList<TWord> actual;

            actual = target.WordsInRectangle(rectangle, containsOnly);

            Assert.AreEqual(0, actual.Count, "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");

            rectangle = page.Lines[0].Rectangle;
            rectangle.Offset(100, 20);
            
            actual = target.WordsInRectangle(rectangle, containsOnly);
            Assert.AreEqual(4, actual.Count, "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");
            Assert.AreEqual(page.Lines[0].Words[0], actual[0], "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");

            
        }

        /// <summary>
        ///A test for LinesInRectangle (Rectangle, bool)
        ///</summary>
        [TestMethod()]
        public void LinesInRectangleTest()
        {
            TPage page = m_TestPage; 

            DataLocator target = new DataLocator(page);

            Rectangle rectangle = new Rectangle(0, 0, 1, 1);

            bool containsOnly = false; // TODO: Initialize to an appropriate value

            IList<TLine> actual;

            actual = target.LinesInRectangle(rectangle, containsOnly);

            Assert.AreEqual(0, actual.Count, "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");

            rectangle = page.Lines[0].Rectangle;
            rectangle.Offset(100, 20);

            actual = target.LinesInRectangle(rectangle, containsOnly);

            Assert.AreEqual(1, actual.Count, "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");
            Assert.AreEqual(page.Lines[0], actual[0], "Recognition.Locator.DataLocator.WordsInRectangle did not return the expected valu" +
                    "e.");
        }

        /// <summary>
        ///A test for Page
        ///</summary>
        [TestMethod()]
        public void PageTest()
        {
            TPage page = m_TestPage;

            DataLocator target = new DataLocator(page);

            TPage val = m_TestPage; 


            Assert.AreEqual(val, target.Page, "Recognition.Locator.DataLocator.Page was not set correctly.");
           
        }

   
    }


}
